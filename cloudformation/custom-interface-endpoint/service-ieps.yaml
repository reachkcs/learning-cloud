# Creates the webservice using NLB
# ../../bin/create-or-update-cw-stack.bash service-ieps.yaml KCSTEMP-SERVICE-IEPS YES
AWSTemplateFormatVersion: '2010-09-09'
Description: Template to create the webservice using NLB
Resources:
  # Create VPC
  ServiceVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: ServiceVPC

  InternetGatewayServiceVPC:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGatewayServiceVPC

  ServiceVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref ServiceVPC
      InternetGatewayId: !Ref InternetGatewayServiceVPC

  # Create a public subnet
  PublicSubnetServiceVPC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ServiceVPC
      CidrBlock: 192.168.1.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnetServiceVPC

  PublicRouteTableServiceVPC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ServiceVPC
      Tags:
        - Key: Name
          Value: PublicRouteTableServiceVPC

  PublicRouteServiceVPC:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTableServiceVPC
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGatewayServiceVPC

  RouteTableAssociationServiceVPC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetServiceVPC
      RouteTableId: !Ref PublicRouteTableServiceVPC

  # Security Group to allow traffic from anywhere for 80
  PublicEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow 80 from anywhere
      VpcId: !Ref ServiceVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # SSH Key Pair
  KCSKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: KCSKEYPAIR
      PublicKeyMaterial: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDXQeWsmLzfgpJgwjG77OtlElm//t5CAlehHlQmReIEZRFe0tFhHBnsZSWEau5hVCKhnN8hKhNWr+Nikk4Q1EeUMwdOAPom833+NRlgZN+yeFcIx2jB2WYwCLLFoxHWk0NWIHE8mTkYlK3BiloCJg0DO9gnayzIfBmkVgDelAUJSiFBessvEeMw0l6V/S5jgVF7AEwTcFYUOicViyQkEkxWyaP8x0VE6UBw/lR5Y0TiG/ST3wj77TwcuPfYW7Exg21a4PW/mEqw6f4kHTAnDGGGzjWIBdfAWz9edpTeiZX5cvIJIALnBqNFkotBKBQrkQnmESzHhI8vzseQA6EB1vVx schidambaram@Sreedhars-MacBook-Pro.local"

  # EC2 Instance in public subnet that acts as web server
  ServiceEC2Instance1Pub:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      #KeyName: !ImportValue KEYPAIR
      KeyName: !Ref KCSKeyPair
      SecurityGroupIds:
        - !Ref PublicEC2SecurityGroup
      SubnetId: !Ref PublicSubnetServiceVPC
      ImageId: !Sub '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64}}' # Dynamically fetch the Amazon Linux 3 AMI
      Tags:
        - Key: Name
          Value: Public-EC2-ServiceVPC
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd

            # Use IMDSv2 to fetch instance metadata
            TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
            INSTANCE_ID=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)
            AZ=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/placement/availability-zone)

            echo "<html>" > /var/www/html/index.html
            echo "<head><title>Public EC2</title></head>" >> /var/www/html/index.html
            echo "<body>" >> /var/www/html/index.html
            echo "<h1>Hello from EC2!</h1>" >> /var/www/html/index.html
            echo "<p>Instance ID: $INSTANCE_ID</p>" >> /var/www/html/index.html
            echo "<p>Availability Zone: $AZ</p>" >> /var/www/html/index.html
            echo "</body>" >> /var/www/html/index.html
            echo "</html>" >> /var/www/html/index.html

  # Create a Network Load Balancer
  ServiceNLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ServiceNLB
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnetServiceVPC
      Type: network
      Tags:
        - Key: Name
          Value: ServiceNLB

  TargetGroupService:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: ServiceTargetGroup
      Protocol: TCP
      Port: 80
      VpcId: !Ref ServiceVPC
      TargetType: instance
      Targets:
        - Id: !Ref ServiceEC2Instance1Pub
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckPort: 80
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  ListenerService:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupService
      LoadBalancerArn: !Ref ServiceNLB
      Port: 80
      Protocol: TCP

Outputs:
  CustomerVPCId:
    Description: Service VPC ID
    Value: !Ref ServiceVPC

  PublicSubnetIdServiceVPC:
    Description: Public Subnet ID for Service VPC
    Value: !Ref PublicSubnetServiceVPC

  ServiceEC2Instance1PublicDNS:
    Description: Public DNS of the public EC2 instance in Service VPC
    Value: !GetAtt ServiceEC2Instance1Pub.PublicDnsName
  
  ServiceNLBDNS:
    Description: DNS name of the Network Load Balancer
    Value: !GetAtt ServiceNLB.DNSName

  ServiceNLBArn:
    Description: ARN of the Network Load Balancer
    Value: !GetAtt ServiceNLB.LoadBalancerArn
    Export:
      Name: NLBARN

  KeyName:
    Description: Name of the created key pair
    Value: !Ref KCSKeyPair
    Export:
        Name: KEYPAIR