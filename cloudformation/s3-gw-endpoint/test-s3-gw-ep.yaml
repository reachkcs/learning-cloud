AWSTemplateFormatVersion: '2010-09-09'
Description: Template to test S3 Gateway Endpoint functionality.
Resources:
  # Create test S3 bucket
  TestS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub test-s3-bucket-${AWS::AccountId}-${AWS::Region}
      Tags:
        - Key: Name
          Value: TestS3Bucket

  # Create VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.1.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: VPC

  InternetGatewayVPC:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGatewayVPC

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGatewayVPC

  # Create a private subnet
  PrivateSubnetVPC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 192.168.2.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: PrivateSubnetVPC

  PrivateRouteTableVPC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTableVPC

  PrivRouteTableAssociationVPC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetVPC
      RouteTableId: !Ref PrivateRouteTableVPC

  # Create a public subnet
  PublicSubnetVPC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 192.168.3.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnetVPC

  PublicRouteTableVPC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTableVPC

  PublicRouteVPC:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTableVPC
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGatewayVPC

  RouteTableAssociationVPC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetVPC
      RouteTableId: !Ref PublicRouteTableVPC

# Build test EC2s
  # SSH Key Pair
  KCSKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: KCSKEYPAIR
      PublicKeyMaterial: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDXQeWsmLzfgpJgwjG77OtlElm//t5CAlehHlQmReIEZRFe0tFhHBnsZSWEau5hVCKhnN8hKhNWr+Nikk4Q1EeUMwdOAPom833+NRlgZN+yeFcIx2jB2WYwCLLFoxHWk0NWIHE8mTkYlK3BiloCJg0DO9gnayzIfBmkVgDelAUJSiFBessvEeMw0l6V/S5jgVF7AEwTcFYUOicViyQkEkxWyaP8x0VE6UBw/lR5Y0TiG/ST3wj77TwcuPfYW7Exg21a4PW/mEqw6f4kHTAnDGGGzjWIBdfAWz9edpTeiZX5cvIJIALnBqNFkotBKBQrkQnmESzHhI8vzseQA6EB1vVx schidambaram@Sreedhars-MacBook-Pro.local"

  # Security Group Open to SSH
  GlobalSecurityGroupVPC:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH from anywhere
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 70.106.201.186/32

  # EC2 Instance in public subnet that acts as bastion
  EC2Instance1Pub:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref KCSKeyPair
      SecurityGroupIds:
        - !Ref GlobalSecurityGroupVPC
      SubnetId: !Ref PublicSubnetVPC
      ImageId: ami-0c02fb55956c7d316 # Amazon Linux 2 AMI (Free Tier Eligible)
      Tags:
        - Key: Name
          Value: EC2-VPC

  # Security Group for private EC2
  SecurityGroupVPCPriv:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH from 192.168.0.0/16
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 192.168.0.0/16

  # Private EC2 Instance in VPC
  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref InstanceRole

  InstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "S3AccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:*"
                Resource:
                  - "*"

  EC2Instance1Priv:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref KCSKeyPair
      SecurityGroupIds:
        - !Ref SecurityGroupVPCPriv
      SubnetId: !Ref PrivateSubnetVPC
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: ami-0c02fb55956c7d316 # Amazon Linux 2 AMI (Free Tier Eligible)
      Tags:
        - Key: Name
          Value: Priv-EC2-VPC

  # Create S3 Gateway Endpoint
  S3GatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PrivateRouteTableVPC
      Tags:
        - Key: Name
          Value: S3GatewayEndpoint

Outputs:
  S3BucketName:
    Description: Name of the S3 bucket created for testing.
    Value: !Ref TestS3Bucket

  VPCId:
    Description: VPC ID
    Value: !Ref VPC

  PrivateSubnetIdVPC:
    Description: Private Subnet ID for VPC
    Value: !Ref PrivateSubnetVPC

  PublicSubnetIdVPC:
    Description: Public Subnet ID for VPC
    Value: !Ref PublicSubnetVPC

  EC2Instance1PublicDNS:
    Description: Public DNS of the public EC2 instance
    Value: !GetAtt EC2Instance1Pub.PublicDnsName

  EC2Instance2PrivateDNS:
    Description: Private DNS of the private EC2 instance
    Value: !GetAtt EC2Instance1Priv.PrivateDnsName

  KeyName:
    Description: Name of the created key pair
    Value: !Ref KCSKeyPair